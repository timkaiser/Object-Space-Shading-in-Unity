//this compute shader takes the rendered uv and mip map coordinates of the first pass and writes a tilemask of wich parts of the texture gets actually rendered

#pragma kernel CSMain

Texture2D<int2> IDandMip;	
Texture2D<float2> UV;
RWTexture2DArray<float3> Output;
int ID;

//main part of compute shader
[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	int2 idAndMip = IDandMip[id.xy];
	float2 uv = UV[id.xy];

	if (idAndMip.x != ID) { return; }

	uint width, height, elements;
	Output.GetDimensions(width, height, elements);

	int mipLevel = idAndMip.y;
	int widthAtLevel = width >> mipLevel;
	int heightAtLevel = height >> mipLevel;

	Output[int3(widthAtLevel*uv.x, heightAtLevel*uv.y, mipLevel)] = float3(1, 0, 0);
}


